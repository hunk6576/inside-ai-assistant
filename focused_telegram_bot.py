import os
import json
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from core import ask_gpt

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

JOURNAL_PATH = "journals"
USER_PATH = "users"
os.makedirs(JOURNAL_PATH, exist_ok=True)
os.makedirs(USER_PATH, exist_ok=True)

BUTTONS = [
    ["üìñ –ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫", "üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏–º"],
    ["üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
]
reply_markup = ReplyKeyboardMarkup(BUTTONS, resize_keyboard=True)
STYLE_CHOICES = ReplyKeyboardMarkup([["–ù–∞ —Ç—ã", "–ù–∞ –≤—ã"]], resize_keyboard=True)
back_markup = ReplyKeyboardMarkup([["‚óÄÔ∏è –ù–∞–∑–∞–¥"]], resize_keyboard=True)

user_contexts = {}
user_schedulers = {}
scheduler = AsyncIOScheduler()

def save_user_time(user_id, morning_time=None, evening_time=None):
    user_file = f"{USER_PATH}/{user_id}.json"
    data = {}
    if os.path.exists(user_file):
        with open(user_file, "r", encoding="utf-8") as f:
            data = json.load(f)
    if morning_time:
        data["morning_time"] = morning_time
    if evening_time:
        data["evening_time"] = evening_time
    with open(user_file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False)

def load_user_time(user_id):
    user_file = f"{USER_PATH}/{user_id}.json"
    if os.path.exists(user_file):
        with open(user_file, "r", encoding="utf-8") as f:
            data = json.load(f)
        return data.get("morning_time", "08:00"), data.get("evening_time", "21:00")
    return "08:00", "21:00"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_file = f"{USER_PATH}/{user_id}.json"

    if not os.path.exists(user_file):
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! üëã\n–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Å —Ç–æ–±–æ–π –æ–±—â–∞–ª—Å—è?",
            reply_markup=STYLE_CHOICES
        )
    else:
        await update.message.reply_text(
            "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É—Ç—å –∫ —Å–µ–±–µ ‚ú®",
            reply_markup=reply_markup
        )

async def save_style(update: Update, context: ContextTypes.DEFAULT_TYPE):
    style = update.message.text
    if style not in ["–ù–∞ —Ç—ã", "–ù–∞ –≤—ã"]:
        return False

    user_id = update.effective_user.id
    user_file = f"{USER_PATH}/{user_id}.json"
    data = {"style": style}
    if os.path.exists(user_file):
        with open(user_file, "r", encoding="utf-8") as f:
            existing = json.load(f)
        data.update(existing)

    with open(user_file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False)

    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —è –±—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è {'–Ω–∞ —Ç—ã' if style == '–ù–∞ —Ç—ã' else '–Ω–∞ –≤—ã'} üòä",
        reply_markup=reply_markup
    )
    return True

def schedule_user_messages(user_id, app):
    morning_time, evening_time = load_user_time(user_id)

    def parse_time(t):
        h, m = map(int, t.split(":"))
        return h, m

    if user_id in user_schedulers:
        job_ids = user_schedulers[user_id]
        for job_id in job_ids:
            scheduler.remove_job(job_id)

    morning_hour, morning_minute = parse_time(morning_time)
    evening_hour, evening_minute = parse_time(evening_time)

    m_job = scheduler.add_job(send_morning_message, "cron", hour=morning_hour, minute=morning_minute, args=[app, user_id])
    e_job = scheduler.add_job(send_evening_message, "cron", hour=evening_hour, minute=evening_minute, args=[app, user_id])
    user_schedulers[user_id] = [m_job.id, e_job.id]

async def send_morning_message(app, user_id):
    try:
        await app.bot.send_message(chat_id=user_id, text="‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã—Ä–∞–∑–∏—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏?")
        user_contexts[user_id] = "üåû –£—Ç—Ä–æ"
    except Exception as e:
        print(f"‚ùå –£—Ç—Ä–æ: –æ—à–∏–±–∫–∞ {user_id}: {e}")

async def send_evening_message(app, user_id):
    try:
        await app.bot.send_message(chat_id=user_id, text="üåô –ö–∞–∫ –ø—Ä–æ—à—ë–ª –¥–µ–Ω—å? –ó–∞–ø–∏—à–∏ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏–ª–∏ –∏–¥–µ–∏ üìì")
        user_contexts[user_id] = "üåô –í–µ—á–µ—Ä"
    except Exception as e:
        print(f"‚ùå –í–µ—á–µ—Ä: –æ—à–∏–±–∫–∞ {user_id}: {e}")

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_input = update.message.text.strip()

    user_file = f"{USER_PATH}/{user_id}.json"
    if not os.path.exists(user_file):
        saved = await save_style(update, context)
        if saved:
            return

    with open(user_file, "r", encoding="utf-8") as f:
        user_data = json.load(f)
        style = user_data.get("style", "–ù–∞ —Ç—ã")

    if user_input == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        context.user_data.pop("settings_step", None)
        return

    if user_input == "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        context.user_data["settings_step"] = "set_morning"
        await update.message.reply_text("–í–æ —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00)", reply_markup=back_markup)
        return

    if context.user_data.get("settings_step") == "set_morning":
        if ":" not in user_input or not all(part.isdigit() for part in user_input.split(":")):
            await update.message.reply_text("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç HH:MM", reply_markup=back_markup)
            return
        save_user_time(user_id, morning_time=user_input)
        context.user_data["settings_step"] = "set_evening"
        await update.message.reply_text("–ê –≤–µ—á–µ—Ä–Ω–µ–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21:00)", reply_markup=back_markup)
        return

    if context.user_data.get("settings_step") == "set_evening":
        if ":" not in user_input or not all(part.isdigit() for part in user_input.split(":")):
            await update.message.reply_text("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç HH:MM", reply_markup=back_markup)
            return
        save_user_time(user_id, evening_time=user_input)
        context.user_data.pop("settings_step")
        schedule_user_messages(user_id, context.application)
        await update.message.reply_text("‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=reply_markup)
        return

    if user_input == "üìñ –ú–æ–π –¥–Ω–µ–≤–Ω–∏–∫":
        path = f"{JOURNAL_PATH}/{user_id}.txt"
        if not os.path.exists(path):
            await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –ù–∞—á–Ω–∏ —Å–µ–≥–æ–¥–Ω—è üìì")
            return
        with open(path, "r", encoding="utf-8") as f:
            lines = f.readlines()[-5:]
        text = "".join(lines)
        await update.message.reply_text(f"üìñ –í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n\n{text}")
        return

    if user_input == "üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏–º":
        await update.message.reply_text("–û —á—ë–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? –Ø —Ä—è–¥–æ–º üôå", reply_markup=back_markup)
        return

    if context.user_data.get("awaiting_journal") or user_id in user_contexts:
        moment = context.user_data.pop("awaiting_journal", None) or user_contexts.pop(user_id, None)
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(f"{JOURNAL_PATH}/{user_id}.txt", "a", encoding="utf-8") as f:
            f.write(f"{now} [{moment}]: {user_input}\n")
        await update.message.reply_text("‚úçÔ∏è –ó–∞–ø–∏—Å–∞–ª. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è.")
        return

    prompt = (
        "–¢—ã —Ç—ë–ø–ª—ã–π –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—é, –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏. –û–±—â–∞–π—Å—è –Ω–∞ '—Ç—ã'."
        if style == "–ù–∞ —Ç—ã" else
        "–í—ã –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏. –û–±—â–∞–π—Ç–µ—Å—å —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –Ω–∞ '–≤—ã'."
    )
    await update.message.chat.send_action("typing")
    reply = await ask_gpt(user_input, system_prompt=prompt)
    await update.message.reply_text(reply)

async def run_bot():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))
    scheduler.start()
    await app.initialize()
    await app.run_polling(close_loop=False)

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∞–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'")
    asyncio.run(run_bot())
